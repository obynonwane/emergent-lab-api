"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IORedisInstrumentation = void 0;
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
const utils_1 = require("./utils");
const version_1 = require("./version");
const DEFAULT_CONFIG = {
    requireParentSpan: true,
};
class IORedisInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor(_config = {}) {
        super('@opentelemetry/instrumentation-ioredis', version_1.VERSION, Object.assign({}, DEFAULT_CONFIG, _config));
    }
    init() {
        return [
            new instrumentation_1.InstrumentationNodeModuleDefinition('ioredis', ['>1 <5'], moduleExports => {
                api_1.diag.debug('Applying patch for ioredis');
                if (instrumentation_1.isWrapped(moduleExports.prototype.sendCommand)) {
                    this._unwrap(moduleExports.prototype, 'sendCommand');
                }
                this._wrap(moduleExports.prototype, 'sendCommand', this._patchSendCommand());
                if (instrumentation_1.isWrapped(moduleExports.prototype.connect)) {
                    this._unwrap(moduleExports.prototype, 'connect');
                }
                this._wrap(moduleExports.prototype, 'connect', this._patchConnection());
                return moduleExports;
            }, moduleExports => {
                if (moduleExports === undefined)
                    return;
                api_1.diag.debug('Removing patch for ioredis');
                this._unwrap(moduleExports.prototype, 'sendCommand');
                this._unwrap(moduleExports.prototype, 'connect');
            }),
        ];
    }
    /**
     * Patch send command internal to trace requests
     */
    _patchSendCommand() {
        return (original) => {
            return utils_1.traceSendCommand(this.tracer, original, this._config);
        };
    }
    _patchConnection() {
        return (original) => {
            return utils_1.traceConnection(this.tracer, original);
        };
    }
}
exports.IORedisInstrumentation = IORedisInstrumentation;
IORedisInstrumentation.DB_SYSTEM = 'redis';
//# sourceMappingURL=ioredis.js.map