{"/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/test/utils.test.ts":{"path":"/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/test/utils.test.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":14},"end":{"line":18,"column":43}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":32}},"3":{"start":{"line":20,"column":14},"end":{"line":20,"column":30}},"4":{"start":{"line":21,"column":14},"end":{"line":21,"column":31}},"5":{"start":{"line":22,"column":0},"end":{"line":78,"column":3}},"6":{"start":{"line":23,"column":4},"end":{"line":77,"column":7}},"7":{"start":{"line":24,"column":8},"end":{"line":43,"column":11}},"8":{"start":{"line":25,"column":37},"end":{"line":25,"column":72}},"9":{"start":{"line":26,"column":45},"end":{"line":38,"column":13}},"10":{"start":{"line":39,"column":12},"end":{"line":39,"column":60}},"11":{"start":{"line":40,"column":12},"end":{"line":42,"column":13}},"12":{"start":{"line":40,"column":25},"end":{"line":40,"column":26}},"13":{"start":{"line":40,"column":32},"end":{"line":40,"column":55}},"14":{"start":{"line":41,"column":16},"end":{"line":41,"column":167}},"15":{"start":{"line":44,"column":8},"end":{"line":54,"column":11}},"16":{"start":{"line":46,"column":37},"end":{"line":50,"column":14}},"17":{"start":{"line":51,"column":36},"end":{"line":51,"column":135}},"18":{"start":{"line":51,"column":67},"end":{"line":51,"column":134}},"19":{"start":{"line":52,"column":31},"end":{"line":52,"column":54}},"20":{"start":{"line":53,"column":12},"end":{"line":53,"column":100}},"21":{"start":{"line":55,"column":8},"end":{"line":63,"column":11}},"22":{"start":{"line":56,"column":37},"end":{"line":60,"column":14}},"23":{"start":{"line":61,"column":36},"end":{"line":61,"column":135}},"24":{"start":{"line":61,"column":67},"end":{"line":61,"column":134}},"25":{"start":{"line":62,"column":12},"end":{"line":62,"column":59}},"26":{"start":{"line":64,"column":8},"end":{"line":76,"column":11}},"27":{"start":{"line":65,"column":24},"end":{"line":65,"column":55}},"28":{"start":{"line":66,"column":25},"end":{"line":66,"column":63}},"29":{"start":{"line":67,"column":37},"end":{"line":72,"column":14}},"30":{"start":{"line":73,"column":36},"end":{"line":73,"column":102}},"31":{"start":{"line":73,"column":67},"end":{"line":73,"column":101}},"32":{"start":{"line":74,"column":12},"end":{"line":74,"column":59}},"33":{"start":{"line":75,"column":12},"end":{"line":75,"column":100}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":18},"end":{"line":22,"column":19}},"loc":{"start":{"line":22,"column":24},"end":{"line":78,"column":1}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":44},"end":{"line":23,"column":45}},"loc":{"start":{"line":23,"column":50},"end":{"line":77,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":51},"end":{"line":24,"column":52}},"loc":{"start":{"line":24,"column":57},"end":{"line":43,"column":9}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":44,"column":37},"end":{"line":44,"column":38}},"loc":{"start":{"line":44,"column":43},"end":{"line":54,"column":9}},"line":44},"4":{"name":"applyCustomAttributesOnSpan","decl":{"start":{"line":45,"column":21},"end":{"line":45,"column":48}},"loc":{"start":{"line":45,"column":51},"end":{"line":45,"column":54}},"line":45},"5":{"name":"(anonymous_5)","decl":{"start":{"line":51,"column":58},"end":{"line":51,"column":59}},"loc":{"start":{"line":51,"column":67},"end":{"line":51,"column":134}},"line":51},"6":{"name":"(anonymous_6)","decl":{"start":{"line":55,"column":57},"end":{"line":55,"column":58}},"loc":{"start":{"line":55,"column":63},"end":{"line":63,"column":9}},"line":55},"7":{"name":"(anonymous_7)","decl":{"start":{"line":61,"column":58},"end":{"line":61,"column":59}},"loc":{"start":{"line":61,"column":67},"end":{"line":61,"column":134}},"line":61},"8":{"name":"(anonymous_8)","decl":{"start":{"line":64,"column":66},"end":{"line":64,"column":67}},"loc":{"start":{"line":64,"column":72},"end":{"line":76,"column":9}},"line":64},"9":{"name":"(anonymous_9)","decl":{"start":{"line":73,"column":58},"end":{"line":73,"column":59}},"loc":{"start":{"line":73,"column":67},"end":{"line":73,"column":101}},"line":73}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":11,"15":1,"16":1,"17":1,"18":5,"19":1,"20":1,"21":1,"22":1,"23":1,"24":10,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":11,"32":1,"33":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":5,"6":1,"7":10,"8":1,"9":11},"b":{},"inputSourceMap":{"version":3,"file":"/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/test/utils.test.ts","sources":["/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/test/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { HttpInstrumentationConfig } from '@opentelemetry/instrumentation-http';\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { getNodeAutoInstrumentations } from '../src';\n\ndescribe('utils', () => {\n  describe('getNodeAutoInstrumentations', () => {\n    it('should load default instrumentations', () => {\n      const instrumentations = getNodeAutoInstrumentations();\n      const expectedInstrumentations = [\n        '@opentelemetry/instrumentation-dns',\n        '@opentelemetry/instrumentation-express',\n        '@opentelemetry/instrumentation-graphql',\n        '@opentelemetry/instrumentation-grpc',\n        '@opentelemetry/instrumentation-http',\n        '@opentelemetry/instrumentation-ioredis',\n        '@opentelemetry/instrumentation-koa',\n        '@opentelemetry/instrumentation-mongodb',\n        '@opentelemetry/instrumentation-mysql',\n        '@opentelemetry/instrumentation-pg',\n        '@opentelemetry/instrumentation-redis',\n      ];\n      assert.strictEqual(instrumentations.length, 11);\n      for (let i = 0, j = instrumentations.length; i < j; i++) {\n        assert.strictEqual(\n          instrumentations[i].instrumentationName,\n          expectedInstrumentations[i],\n          `Instrumentation ${expectedInstrumentations[i]}, not loaded`\n        );\n      }\n    });\n\n    it('should use user config', () => {\n      function applyCustomAttributesOnSpan() {}\n\n      const instrumentations = getNodeAutoInstrumentations({\n        '@opentelemetry/instrumentation-http': {\n          applyCustomAttributesOnSpan,\n        },\n      });\n      const instrumentation = instrumentations.find(\n        instr =>\n          instr.instrumentationName === '@opentelemetry/instrumentation-http'\n      ) as any;\n      const configHttp = instrumentation._config as HttpInstrumentationConfig;\n\n      assert.strictEqual(\n        configHttp.applyCustomAttributesOnSpan,\n        applyCustomAttributesOnSpan\n      );\n    });\n\n    it('should not return disabled instrumentation', () => {\n      const instrumentations = getNodeAutoInstrumentations({\n        '@opentelemetry/instrumentation-grpc': {\n          enabled: false,\n        },\n      });\n      const instrumentation = instrumentations.find(\n        instr =>\n          instr.instrumentationName === '@opentelemetry/instrumentation-grpc'\n      );\n      assert.strictEqual(instrumentation, undefined);\n    });\n\n    it('should show error for none existing instrumentation', () => {\n      const spy = sinon.stub(diag, 'error');\n      const name = '@opentelemetry/instrumentation-http2';\n      const instrumentations = getNodeAutoInstrumentations({\n        // @ts-expect-error verify that wrong name works\n        [name]: {\n          enabled: false,\n        },\n      });\n      const instrumentation = instrumentations.find(\n        instr => instr.instrumentationName === name\n      );\n      assert.strictEqual(instrumentation, undefined);\n\n      assert.strictEqual(\n        spy.args[0][0],\n        `Provided instrumentation name \"${name}\" not found`\n      );\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"17aab59e00a40fcb505309196b6c5f1a9780d159","contentHash":"4472421de7a5d21666a14e445b981629ce878a277fbee59dd1e1c63d044808e1"},"/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/src/utils.ts":{"path":"/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/src/utils.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":45}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":43}},"3":{"start":{"line":20,"column":30},"end":{"line":20,"column":75}},"4":{"start":{"line":21,"column":34},"end":{"line":21,"column":83}},"5":{"start":{"line":22,"column":34},"end":{"line":22,"column":83}},"6":{"start":{"line":23,"column":31},"end":{"line":23,"column":77}},"7":{"start":{"line":24,"column":31},"end":{"line":24,"column":77}},"8":{"start":{"line":25,"column":34},"end":{"line":25,"column":83}},"9":{"start":{"line":26,"column":30},"end":{"line":26,"column":75}},"10":{"start":{"line":27,"column":34},"end":{"line":27,"column":83}},"11":{"start":{"line":28,"column":29},"end":{"line":28,"column":73}},"12":{"start":{"line":29,"column":32},"end":{"line":29,"column":79}},"13":{"start":{"line":30,"column":32},"end":{"line":30,"column":79}},"14":{"start":{"line":31,"column":27},"end":{"line":43,"column":1}},"15":{"start":{"line":46,"column":4},"end":{"line":51,"column":5}},"16":{"start":{"line":47,"column":8},"end":{"line":50,"column":9}},"17":{"start":{"line":48,"column":12},"end":{"line":48,"column":82}},"18":{"start":{"line":49,"column":12},"end":{"line":49,"column":21}},"19":{"start":{"line":52,"column":29},"end":{"line":52,"column":31}},"20":{"start":{"line":53,"column":4},"end":{"line":68,"column":5}},"21":{"start":{"line":54,"column":25},"end":{"line":54,"column":49}},"22":{"start":{"line":56,"column":27},"end":{"line":56,"column":88}},"23":{"start":{"line":57,"column":8},"end":{"line":60,"column":9}},"24":{"start":{"line":58,"column":12},"end":{"line":58,"column":70}},"25":{"start":{"line":59,"column":12},"end":{"line":59,"column":21}},"26":{"start":{"line":61,"column":8},"end":{"line":67,"column":9}},"27":{"start":{"line":62,"column":12},"end":{"line":62,"column":68}},"28":{"start":{"line":63,"column":12},"end":{"line":63,"column":60}},"29":{"start":{"line":66,"column":12},"end":{"line":66,"column":32}},"30":{"start":{"line":69,"column":4},"end":{"line":69,"column":28}},"31":{"start":{"line":71,"column":0},"end":{"line":71,"column":66}}},"fnMap":{"0":{"name":"getNodeAutoInstrumentations","decl":{"start":{"line":44,"column":9},"end":{"line":44,"column":36}},"loc":{"start":{"line":44,"column":56},"end":{"line":70,"column":1}},"line":44}},"branchMap":{"0":{"loc":{"start":{"line":44,"column":37},"end":{"line":44,"column":54}},"type":"default-arg","locations":[{"start":{"line":44,"column":52},"end":{"line":44,"column":54}}],"line":44},"1":{"loc":{"start":{"line":47,"column":8},"end":{"line":50,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":50,"column":9}},{"start":{"line":47,"column":8},"end":{"line":50,"column":9}}],"line":47},"2":{"loc":{"start":{"line":56,"column":27},"end":{"line":56,"column":88}},"type":"cond-expr","locations":[{"start":{"line":56,"column":81},"end":{"line":56,"column":83}},{"start":{"line":56,"column":86},"end":{"line":56,"column":88}}],"line":56},"3":{"loc":{"start":{"line":56,"column":27},"end":{"line":56,"column":78}},"type":"binary-expr","locations":[{"start":{"line":56,"column":27},"end":{"line":56,"column":61}},{"start":{"line":56,"column":65},"end":{"line":56,"column":78}}],"line":56},"4":{"loc":{"start":{"line":57,"column":8},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":60,"column":9}},{"start":{"line":57,"column":8},"end":{"line":60,"column":9}}],"line":57}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":4,"16":3,"17":1,"18":1,"19":4,"20":4,"21":44,"22":44,"23":44,"24":1,"25":1,"26":43,"27":43,"28":43,"29":0,"30":4,"31":1},"f":{"0":4},"b":{"0":[1],"1":[1,2],"2":[2,42],"3":[44,44],"4":[1,43]},"inputSourceMap":{"version":3,"file":"/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/src/utils.ts","sources":["/Users/daniel.dyla/otel/opentelemetry-js-contrib/metapackages/auto-instrumentations-node/src/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAA0C;AAE1C,4EAAwE;AACxE,oFAAgF;AAChF,oFAAgF;AAChF,8EAA0E;AAC1E,8EAA0E;AAC1E,oFAAgF;AAChF,4EAAwE;AACxE,oFAAgF;AAChF,0EAAsE;AACtE,gFAA4E;AAC5E,gFAA4E;AAE5E,MAAM,kBAAkB,GAAG;IACzB,oCAAoC,EAAE,wCAAkB;IACxD,wCAAwC,EAAE,gDAAsB;IAChE,wCAAwC,EAAE,gDAAsB;IAChE,qCAAqC,EAAE,0CAAmB;IAC1D,qCAAqC,EAAE,0CAAmB;IAC1D,wCAAwC,EAAE,gDAAsB;IAChE,oCAAoC,EAAE,wCAAkB;IACxD,wCAAwC,EAAE,gDAAsB;IAChE,sCAAsC,EAAE,4CAAoB;IAC5D,mCAAmC,EAAE,sCAAiB;IACtD,sCAAsC,EAAE,4CAAoB;CAC7D,CAAC;AAUF,SAAgB,2BAA2B,CACzC,eAAyC,EAAE;;IAE3C,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;QAC5C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,EAAE;YACnE,UAAI,CAAC,KAAK,CAAC,kCAAkC,IAAI,aAAa,CAAC,CAAC;YAChE,SAAS;SACV;KACF;IAED,MAAM,gBAAgB,GAAsB,EAAE,CAAC;IAE/C,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAEhD,EAAE;QACD,MAAM,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC1C,qDAAqD;QACrD,MAAM,UAAU,SAAG,YAAY,CAAC,IAAI,CAAC,mCAAI,EAAE,CAAC;QAE5C,IAAI,UAAU,CAAC,OAAO,KAAK,KAAK,EAAE;YAChC,UAAI,CAAC,KAAK,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAC;YACpD,SAAS;SACV;QAED,IAAI;YACF,UAAI,CAAC,KAAK,CAAC,+BAA+B,IAAI,EAAE,CAAC,CAAC;YAClD,gBAAgB,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;SACjD;QAAC,OAAO,CAAC,EAAE;YACV,UAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACf;KACF;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAjCD,kEAiCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { DnsInstrumentation } from '@opentelemetry/instrumentation-dns';\nimport { ExpressInstrumentation } from '@opentelemetry/instrumentation-express';\nimport { GraphQLInstrumentation } from '@opentelemetry/instrumentation-graphql';\nimport { GrpcInstrumentation } from '@opentelemetry/instrumentation-grpc';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport { IORedisInstrumentation } from '@opentelemetry/instrumentation-ioredis';\nimport { KoaInstrumentation } from '@opentelemetry/instrumentation-koa';\nimport { MongoDBInstrumentation } from '@opentelemetry/instrumentation-mongodb';\nimport { PgInstrumentation } from '@opentelemetry/instrumentation-pg';\nimport { MySQLInstrumentation } from '@opentelemetry/instrumentation-mysql';\nimport { RedisInstrumentation } from '@opentelemetry/instrumentation-redis';\n\nconst InstrumentationMap = {\n  '@opentelemetry/instrumentation-dns': DnsInstrumentation,\n  '@opentelemetry/instrumentation-express': ExpressInstrumentation,\n  '@opentelemetry/instrumentation-graphql': GraphQLInstrumentation,\n  '@opentelemetry/instrumentation-grpc': GrpcInstrumentation,\n  '@opentelemetry/instrumentation-http': HttpInstrumentation,\n  '@opentelemetry/instrumentation-ioredis': IORedisInstrumentation,\n  '@opentelemetry/instrumentation-koa': KoaInstrumentation,\n  '@opentelemetry/instrumentation-mongodb': MongoDBInstrumentation,\n  '@opentelemetry/instrumentation-mysql': MySQLInstrumentation,\n  '@opentelemetry/instrumentation-pg': PgInstrumentation,\n  '@opentelemetry/instrumentation-redis': RedisInstrumentation,\n};\n\n// Config types inferred automatically from the first argument of the constructor\ntype ConfigArg<T> = T extends new (...args: infer U) => unknown ? U[0] : never;\nexport type InstrumentationConfigMap = {\n  [Name in keyof typeof InstrumentationMap]?: ConfigArg<\n    typeof InstrumentationMap[Name]\n  >;\n};\n\nexport function getNodeAutoInstrumentations(\n  inputConfigs: InstrumentationConfigMap = {}\n): Instrumentation[] {\n  for (const name of Object.keys(inputConfigs)) {\n    if (!Object.prototype.hasOwnProperty.call(InstrumentationMap, name)) {\n      diag.error(`Provided instrumentation name \"${name}\" not found`);\n      continue;\n    }\n  }\n\n  const instrumentations: Instrumentation[] = [];\n\n  for (const name of Object.keys(InstrumentationMap) as Array<\n    keyof typeof InstrumentationMap\n  >) {\n    const Instance = InstrumentationMap[name];\n    // Defaults are defined by the instrumentation itself\n    const userConfig = inputConfigs[name] ?? {};\n\n    if (userConfig.enabled === false) {\n      diag.debug(`Disabling instrumentation for ${name}`);\n      continue;\n    }\n\n    try {\n      diag.debug(`Loading instrumentation for ${name}`);\n      instrumentations.push(new Instance(userConfig));\n    } catch (e) {\n      diag.error(e);\n    }\n  }\n\n  return instrumentations;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5841a01ce90af390c24a0488abfa1fcec8c92853","contentHash":"eb717fba9a1bf903ab32597e78d9ebfe684f3ba80ff92476ffa1a0ec29adbbcb"}}