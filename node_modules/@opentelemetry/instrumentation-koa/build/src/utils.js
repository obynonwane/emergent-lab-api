"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMiddlewareMetadata = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const types_1 = require("./types");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const getMiddlewareMetadata = (context, layer, isRouter, layerPath) => {
    var _a;
    if (isRouter) {
        return {
            attributes: {
                [types_1.AttributeNames.KOA_NAME]: layerPath,
                [types_1.AttributeNames.KOA_TYPE]: types_1.KoaLayerType.ROUTER,
                [semantic_conventions_1.SemanticAttributes.HTTP_ROUTE]: layerPath,
            },
            name: `router - ${layerPath}`,
        };
    }
    else {
        return {
            attributes: {
                [types_1.AttributeNames.KOA_NAME]: (_a = layer.name) !== null && _a !== void 0 ? _a : 'middleware',
                [types_1.AttributeNames.KOA_TYPE]: types_1.KoaLayerType.MIDDLEWARE,
            },
            name: `middleware - ${layer.name}`,
        };
    }
};
exports.getMiddlewareMetadata = getMiddlewareMetadata;
//# sourceMappingURL=utils.js.map